local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local state = ReplicatedStorage:WaitForChild("State")
local timer = state:WaitForChild("Timer")
local player = Players.LocalPlayer
local WaveLabel = player:WaitForChild("PlayerGui")
	:WaitForChild("ReactGameTopGameDisplay")
	:WaitForChild("Frame").wave.container.value

local TDS = {}
local towers = {}

local function getWaveTime()
	local wave = tonumber(WaveLabel.Text:match("%d+")) or 0
	local time = timer.Time.Value
	local min, sec = math.floor(time / 60), math.floor(time % 60)
	return wave, min, sec
end

function TDS:WaitWave(targetWave, targetMin, targetSec)
	while true do
		task.wait(0.05)
		local wave, min, sec = getWaveTime()

		if wave > targetWave then
			break
		elseif wave == targetWave then
			if min > targetMin or (min == targetMin and sec >= targetSec) then
				break
			end
		end
	end
end

function TDS:Place(name, x, y, z, wave, min, sec, rx, ry, rz)
	self:WaitWave(wave, min, sec)
	local pos = Vector3.new(x, y, z)
	local rot = Vector3.new(rx or 0, ry or 0, rz or 0)
	local model = rF:InvokeServer("Troops", "Place", {Position = pos, Rotation = rot}, name)
	if model and model:IsA("Model") then
		table.insert(towers, model)
	end
end

function TDS:Upgrade(id, wave, min, sec, path, level)
	self:WaitWave(wave, min, sec)
	local tower = towers[id]
	if tower then
		if path then
			rF:InvokeServer("Troops", "Upgrade", "Set", {
				Troop = tower,
				Path = path,
			})
		end
		rF:InvokeServer("Troops", "Upgrade", tower)
	end
end

function TDS:Sell(id, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = towers[id]
	if tower then
		rF:InvokeServer("Troops", "Sell", tower)
	end
end

function TDS:Target(id, mode, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = towers[id]
	if tower then
		rF:InvokeServer("Troops", "Set", {
			Troop = tower,
			Target = mode
		})
	end
end

function TDS:Ability(id, abilityName, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = towers[id]
	if tower then
		rF:InvokeServer("Troops", "Activate", {
			Troop = tower,
			Name = abilityName
		})
	end
end

function TDS:Option(id, name, value, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = towers[id]
	if tower then
		rF:InvokeServer("Troops", "Option", "Set", {
			Troop = tower,
			Name = name,
			Value = value
		})
	end
end

function TDS:VoteSkip(wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Voting", "Skip")
end

return TDS
