local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage.RemoteFunction
local WaveValue = workspace:WaitForChild("WaveValue")

local TDS = {}
local Notifications = true

local function notify(text)
    if Notifications and setclipboard then
        print("[TDS Playback] " .. text)
    end
end

function TDS:Mode(name)
    notify("Set Mode: " .. tostring(name))
end

function TDS:Map(name, solo, mode)
    notify("Set Map: " .. tostring(name))
end

function TDS:Loadout(...)
    notify("Loadout Set: " .. table.concat({...}, ", "))
end

function TDS:Place(tower, x, y, z, wave, min, sec, inbetween)
    TDS:WaitWave(wave, min, sec)
    notify("Placing: " .. tower)
    local result = rF:InvokeServer("Troops", "Place", tower, Vector3.new(x, y, z))
    return result
end

function TDS:Upgrade(towerIndex, wave, min, sec, inbetween, path)
    TDS:WaitWave(wave, min, sec)
    notify("Upgrading: Tower " .. tostring(towerIndex))
    local args = {"Troops", "Upgrade", towerIndex}
    if path then
        table.insert(args, "Set")
        table.insert(args, path)
    end
    rF:InvokeServer(unpack(args))
end

function TDS:Sell(towerIndex, wave, min, sec, inbetween)
    TDS:WaitWave(wave, min, sec)
    notify("Selling: Tower " .. tostring(towerIndex))
    rF:InvokeServer("Troops", "Sell", towerIndex)
end

function TDS:VoteSkip()
    notify("Vote Skipping")
    rF:InvokeServer("VoteSkip")
end

function TDS:AutoVoteSkip()
    notify("Auto VoteSkip Running")
    task.spawn(function()
        while true do
            task.wait(1)
            TDS:VoteSkip()
        end
    end)
end

function TDS:Ability(towerIndex, abilityName, wave, min, sec, inbetween, data)
    TDS:WaitWave(wave, min, sec)
    notify("Activating Ability: " .. abilityName)
    rF:InvokeServer("Troops", "Ability", towerIndex, abilityName, data or {})
end

function TDS:Target(towerIndex, targetMode, wave, min, sec, inbetween)
    TDS:WaitWave(wave, min, sec)
    notify("Setting Target: " .. targetMode)
    rF:InvokeServer("Troops", "Target", towerIndex, targetMode)
end

function TDS:AutoChain(t1, t2, t3, wave, min, sec, inbetween)
    TDS:WaitWave(wave, min, sec)
    notify("Auto Chaining")
    rF:InvokeServer("Troops", "AutoChain", t1, t2, t3)
end

function TDS:SellAllFarms(wave, min, sec, inbetween)
    TDS:WaitWave(wave, min, sec)
    notify("Selling All Farms")
    rF:InvokeServer("Troops", "SellAllFarms")
end

function TDS:Option(towerIndex, name, value, wave, min, sec, inbetween)
    TDS:WaitWave(wave, min, sec)
    notify("Setting Option: " .. name)
    rF:InvokeServer("Troops", "Option", towerIndex, name, value)
end

function TDS:Wait(seconds)
    task.wait(seconds)
end

function TDS:WaitWave(wave, min, sec)
    local target = (min * 60) + sec
    repeat
        local current = WaveValue.Value
        if current > wave then break end
        task.wait(0.1)
    until WaveValue.Value >= wave
end

return TDS
