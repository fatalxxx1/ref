repeat task.wait() until game:IsLoaded()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local state = ReplicatedStorage:WaitForChild("State")
local timer = state:WaitForChild("Timer")
local player = Players.LocalPlayer
local PGui = player:WaitForChild("PlayerGui")
local WaveL = PGui:WaitForChild("ReactGameTopGameDisplay"):WaitForChild("Frame")
    :WaitForChild("wave").container:WaitForChild("value")

-- Variables
local towers = {}

-- Helper to safely call remote
local function invokeServerSafe(...)
    local success, result = pcall(function()
        return rF:InvokeServer(...)
    end)
    if not success then
        warn("Remote invoke failed:", result)
        return nil
    end
    return result
end

local TDS = {}

-- WaitWave
function TDS.WaitWave(wave, min, sec)
    -- Just wait until the game wave/time matches or passes the requested time
    while true do
        local waveText = WaveL.Text
        local currentWave = tonumber(string.match(waveText, "%d+")) or 0
        local currentTime = timer.Time.Value

        if currentWave > wave then break end
        if currentWave == wave and currentTime >= (min * 60 + sec) then break end
        task.wait(0.1)
    end
    print(string.format("Waited to wave %d, time %d:%02d", wave, min, sec))
end

-- Place Tower
function TDS.Place(name, x, y, z, wave, min, sec, bool, rx, ry, rz, strBool)
    local pos = Vector3.new(x, y, z)
    local rot = Vector3.new(rx or 0, ry or 0, rz or 0)

    local args = {
        "Troops",
        "Place",
        {
            Position = pos,
            Rotation = rot
        },
        name
    }

    local tower = invokeServerSafe(unpack(args))
    if tower and typeof(tower) == "Instance" and tower:IsA("Model") then
        table.insert(towers, tower)
        print("Placed tower:", name)
        return tower
    else
        warn("Failed to place tower:", name)
        return nil
    end
end

-- Upgrade Tower
function TDS.Upgrade(id, wave, min, sec, strBool)
    local tower = towers[id]
    if not tower then
        warn("Upgrade failed: invalid tower ID", id)
        return
    end

    local args = {
        "Troops",
        "Upgrade",
        "Set",
        {
            Troop = tower,
            Path = 1
        }
    }

    invokeServerSafe(unpack(args))
    print("Upgraded tower ID:", id)
end

-- Sell Tower
function TDS.Sell(id, wave, min, sec)
    local tower = towers[id]
    if not tower then
        warn("Sell failed: invalid tower ID", id)
        return
    end

    local args = {
        "Troops",
        "Sell",
        {
            Troop = tower
        }
    }

    invokeServerSafe(unpack(args))
    print("Sold tower ID:", id)
end

-- Ability
function TDS.Ability(id, wave, min, sec)
    local tower = towers[id]
    if not tower then
        warn("Ability failed: invalid tower ID", id)
        return
    end

    local args = {
        "Troops",
        "Abilities",
        "Activate",
        {
            Troop = tower,
            Name = "Call Of Arms",  -- Or adapt if your ability names differ
            Data = {}
        }
    }

    invokeServerSafe(unpack(args))
    print("Activated ability for tower ID:", id)
end

-- Vote Skip
function TDS.VoteSkip(wave, min, sec)
    local args = {
        "Voting",
        "Skip"
    }
    invokeServerSafe(unpack(args))
    print("Voted to skip wave at time", wave, min, sec)
end

-- Target (optional, expand as needed)
function TDS.Target(id, mode, wave, min, sec)
    local tower = towers[id]
    if not tower then
        warn("Target failed: invalid tower ID", id)
        return
    end

    local args = {
        "Troops",
        "Target",
        "Set",
        {
            Troop = tower,
            Target = mode
        }
    }
    invokeServerSafe(unpack(args))
    print(string.format("Set target mode '%s' for tower ID %d", mode, id))
end

-- Option Set (e.g., trap options)
function TDS.Option(id, name, value, wave, min, sec)
    local tower = towers[id]
    if not tower then
        warn("Option failed: invalid tower ID", id)
        return
    end

    local args = {
        "Troops",
        "Option",
        "Set",
        {
            Troop = tower,
            Name = name,
            Value = value
        }
    }
    invokeServerSafe(unpack(args))
    print(string.format("Set option '%s' to '%s' for tower ID %d", name, value, id))
end

print("TDS Playback API loaded successfully.")
return TDS
