_G.TDS = (function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
    local state = ReplicatedStorage:WaitForChild("State")
    local timer = state:WaitForChild("Timer")
    local player = Players.LocalPlayer

    local towers = {}

    local function getWave()
        return state:FindFirstChild("Wave") and state.Wave.Value or 0
    end

    local function getTime()
        return timer.Time.Value or 0
    end

    local function waitForWave(wave, min, sec)
        repeat task.wait(0.1)
            local currentWave = getWave()
            local time = getTime()
            local currentMin = math.floor(time / 60)
            local currentSec = math.floor(time % 60)
        until currentWave > wave or (currentWave == wave and (currentMin > min or (currentMin == min and currentSec >= sec)))
    end

    local TDS = {}

    function TDS.WaitWave(wave, min, sec)
        waitForWave(wave, min, sec)
    end

    function TDS.Place(name, x, y, z, wave, min, sec, pathing, rx, ry, rz)
        waitForWave(wave, min, sec)
        local result = rF:InvokeServer("Troops", "Place", {
            Position = Vector3.new(x, y, z),
            Rotation = Vector3.new(rx or 0, ry or 0, rz or 0),
            Pathing = pathing == true or pathing == "true"
        }, name)
        if typeof(result) == "Instance" and result:IsA("Model") then
            table.insert(towers, result)
        else
            warn("Failed to place:", name)
        end
    end

    function TDS.Upgrade(id, wave, min, sec)
        waitForWave(wave, min, sec)
        local tower = towers[id]
        if tower then
            rF:InvokeServer("Troops", "Upgrade", nil, { Troop = tower })
        end
    end

    function TDS.Sell(id, wave, min, sec)
        waitForWave(wave, min, sec)
        local tower = towers[id]
        if tower then
            rF:InvokeServer("Troops", "Sell", tower)
        end
    end

    function TDS.Ability(id, wave, min, sec)
        waitForWave(wave, min, sec)
        local tower = towers[id]
        if tower then
            rF:InvokeServer("Troops", "Abilities", nil, { Troop = tower })
        end
    end

    function TDS.Target(id, mode, wave, min, sec)
        waitForWave(wave, min, sec)
        local tower = towers[id]
        if tower then
            rF:InvokeServer("Troops", "Target", "Set", { Troop = tower, Target = mode })
        end
    end

    function TDS.Option(id, opt, val, wave, min, sec)
        waitForWave(wave, min, sec)
        local tower = towers[id]
        if tower then
            rF:InvokeServer("Troops", "Option", "Set", { Troop = tower, Name = opt, Value = val })
        end
    end

    function TDS.VoteSkip(wave, min, sec)
        waitForWave(wave, min, sec)
        rF:InvokeServer("Voting", "Skip")
    end

    function TDS.Play(fileName)
        if not isfile or not isfile(fileName) then
            warn("Strategy file not found:", fileName)
            return
        end
        local lines = readfile(fileName):split("\n")
        for _, line in ipairs(lines) do
            local func, args = line:match("TDS:(%w+)%((.*)%)")
            if func and TDS[func] then
                local parsed = {}
                for val in args:gmatch('[^,]+') do
                    val = val:gsub("^%s+", ""):gsub("%s+$", "")
                    if val:match('^".*"$') then
                        table.insert(parsed, val:sub(2, -2))
                    elseif val == "true" then
                        table.insert(parsed, true)
                    elseif val == "false" then
                        table.insert(parsed, false)
                    else
                        table.insert(parsed, tonumber(val))
                    end
                end
                task.spawn(function()
                    pcall(function()
                        TDS[func](table.unpack(parsed))
                    end)
                end)
            end
        end
    end

    return TDS
end)()
