repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local State = ReplicatedStorage:WaitForChild("State")
local Timer = State:WaitForChild("Timer")
local WaveGui = Players.LocalPlayer:WaitForChild("PlayerGui")
    :WaitForChild("ReactGameTopGameDisplay")
    :WaitForChild("Frame").wave.container:WaitForChild("value")

local function getCurrentTime()
    local wave = tonumber(WaveGui.Text:match("%d+")) or 0
    local t = Timer.Time.Value
    return wave, math.floor(t / 60), math.floor(t % 60)
end

local function waitForWaveTime(wave, min, sec)
    while true do
        local curWave, curMin, curSec = getCurrentTime()
        if curWave > wave or (curWave == wave and (curMin > min or (curMin == min and curSec >= sec))) then
            break
        end
        task.wait()
    end
end

local TDS = {}

function TDS:Place(name, x, y, z, wave, min, sec, useRot, rotX, rotY, rotZ, usePath)
    print(("[DEBUG] Placing %s at (%.2f, %.2f, %.2f) [Wave %d @ %02d:%02d]"):format(name, x, y, z, wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local cf = CFrame.new(x, y, z)
    if useRot then
        cf = cf * CFrame.Angles(math.rad(rotX), math.rad(rotY), math.rad(rotZ))
    end

    local success, err = pcall(function()
        rF:InvokeServer("Troops", "Place", {
            Position = cf.Position,
            Rotation = cf - cf.Position,
            Path = usePath and "Path1" or nil
        }, name)
    end)

    if not success then
        warn("[ERROR] Place failed:", err)
    end
end

function TDS:Upgrade(id, wave, min, sec)
    print(("[DEBUG] Upgrading tower #%d [Wave %d @ %02d:%02d]"):format(id, wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local tower = workspace.Towers:GetChildren()[id]
    if tower then
        local success, err = pcall(function()
            rF:InvokeServer("Troops", "Upgrade", tower)
        end)
        if not success then warn("[ERROR] Upgrade failed:", err) end
    else
        warn("[WARN] Tower not found for Upgrade:", id)
    end
end

function TDS:Target(id, mode, wave, min, sec)
    print(("[DEBUG] Setting target mode '%s' on tower #%d [Wave %d @ %02d:%02d]"):format(mode, id, wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local tower = workspace.Towers:GetChildren()[id]
    if tower then
        local success, err = pcall(function()
            rF:InvokeServer("Troops", "Set", {Troop = tower, Target = mode})
        end)
        if not success then warn("[ERROR] Target failed:", err) end
    else
        warn("[WARN] Tower not found for Target:", id)
    end
end

function TDS:Ability(id, wave, min, sec)
    print(("[DEBUG] Activating ability on tower #%d [Wave %d @ %02d:%02d]"):format(id, wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local tower = workspace.Towers:GetChildren()[id]
    if tower then
        local success, err = pcall(function()
            rF:InvokeServer("Troops", "Activate", {Troop = tower})
        end)
        if not success then warn("[ERROR] Ability failed:", err) end
    else
        warn("[WARN] Tower not found for Ability:", id)
    end
end

function TDS:Option(id, name, value, wave, min, sec)
    print(("[DEBUG] Setting option '%s' = '%s' on tower #%d [Wave %d @ %02d:%02d]"):format(name, tostring(value), id, wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local tower = workspace.Towers:GetChildren()[id]
    if tower then
        local success, err = pcall(function()
            rF:InvokeServer("Troops", "Option", "Set", {
                Troop = tower,
                Name = name,
                Value = value
            })
        end)
        if not success then warn("[ERROR] Option failed:", err) end
    else
        warn("[WARN] Tower not found for Option:", id)
    end
end

function TDS:Sell(id, wave, min, sec)
    print(("[DEBUG] Selling tower #%d [Wave %d @ %02d:%02d]"):format(id, wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local tower = workspace.Towers:GetChildren()[id]
    if tower then
        local success, err = pcall(function()
            rF:InvokeServer("Troops", "Sell", {Troop = tower})
        end)
        if not success then warn("[ERROR] Sell failed:", err) end
    else
        warn("[WARN] Tower not found for Sell:", id)
    end
end

function TDS:VoteSkip(wave, min, sec)
    print(("[DEBUG] Voting to skip wave [Wave %d @ %02d:%02d]"):format(wave, min, sec))
    waitForWaveTime(wave, min, sec)

    local success, err = pcall(function()
        rF:InvokeServer("Voting", "Skip")
    end)
    if not success then warn("[ERROR] VoteSkip failed:", err) end
end

function TDS:WaitWave(wave, min, sec)
    print(("[DEBUG] Waiting for Wave %d @ %02d:%02d"):format(wave, min, sec))
    waitForWaveTime(wave, min, sec)
end

return TDS
