-- ✅ TDS Strategy Player API

local TDS = {}
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local state = ReplicatedStorage:WaitForChild("State")
local timer = state:WaitForChild("Timer")
local player = Players.LocalPlayer
local PGui = player:WaitForChild("PlayerGui")
local WaveLabel = PGui:WaitForChild("ReactGameTopGameDisplay"):WaitForChild("Frame")
	:WaitForChild("wave").container:WaitForChild("value")

local function getWave()
	local waveText = WaveLabel.Text
	local wave = tonumber(waveText:match("%d+")) or 0
	return wave
end

local function getTime()
	local t = timer.Time.Value
	return math.floor(t / 60), math.floor(t % 60)
end

-- ✅ Wave Wait Function
function TDS:WaitWave(waveGoal, minGoal, secGoal)
	while true do
		task.wait(0.05)
		local wave = getWave()
		local min, sec = getTime()
		if wave > waveGoal then
			break
		elseif wave == waveGoal then
			if min > minGoal or (min == minGoal and sec >= secGoal) then
				break
			end
		end
	end
end

-- ✅ Place Tower
function TDS:Place(towerName, x, y, z, wave, min, sec, rx, ry, rz)
	self:WaitWave(wave, min, sec)
	local cframe = CFrame.new(x, y, z) * CFrame.Angles(math.rad(rx), math.rad(ry), math.rad(rz))
	rF:InvokeServer("Troops", "Place", {
		Position = Vector3.new(x, y, z),
		CFrame = cframe,
		Rotation = Vector3.new(rx, ry, rz)
	}, towerName)
end

-- ✅ Upgrade Tower (with optional path and level)
function TDS:Upgrade(id, wave, min, sec, path, level)
	self:WaitWave(wave, min, sec)
	if path and level then
		rF:InvokeServer("Troops", "Upgrade", "Set", {
			Troop = workspace.Towers:GetChildren()[id],
			Path = path
		})
		for i = 1, level do
			rF:InvokeServer("Troops", "Upgrade", {
				Troop = workspace.Towers:GetChildren()[id]
			})
		end
	else
		rF:InvokeServer("Troops", "Upgrade", {
			Troop = workspace.Towers:GetChildren()[id]
		})
	end
end

-- ✅ Sell Tower
function TDS:Sell(id, wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Troops", "Sell", {
		Troop = workspace.Towers:GetChildren()[id]
	})
end

-- ✅ Ability Activation
function TDS:Ability(id, name, wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Troops", "Ability", "Activate", {
		Troop = workspace.Towers:GetChildren()[id],
		Name = name
	})
end

-- ✅ Target Mode Change
function TDS:Target(id, mode, wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Troops", "Target", {
		Troop = workspace.Towers:GetChildren()[id],
		Target = mode
	})
end

-- ✅ Set Option
function TDS:Option(id, key, val, wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Troops", "Option", "Set", {
		Troop = workspace.Towers:GetChildren()[id],
		Name = key,
		Value = val
	})
end

-- ✅ Vote Skip
function TDS:VoteSkip(wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Voting", "Skip")
end

return TDS
