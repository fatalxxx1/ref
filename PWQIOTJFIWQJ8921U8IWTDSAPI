repeat task.wait() until game:IsLoaded()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local state = ReplicatedStorage:WaitForChild("State")
local timer = state:WaitForChild("Timer")
local player = Players.LocalPlayer
local PGui = player:WaitForChild("PlayerGui")
local WaveL = PGui:WaitForChild("ReactGameTopGameDisplay"):WaitForChild("Frame")
    :WaitForChild("wave").container:WaitForChild("value")

local towers = workspace:WaitForChild("Towers")

local function getCurrentWave()
    local success, waveText = pcall(function() return WaveL.Text end)
    if success then
        return tonumber(string.match(waveText, "%d+")) or 0
    end
    return 0
end

local function getCurrentTime()
    local success, timeVal = pcall(function() return timer.Time.Value end)
    if success then
        return timeVal
    end
    return 0
end

local function waitForWave(waveTarget, minTarget, secTarget)
    local targetSeconds = minTarget * 60 + secTarget
    while true do
        local waveNow = getCurrentWave()
        local timeNow = getCurrentTime()
        if waveNow > waveTarget or (waveNow == waveTarget and timeNow >= targetSeconds) then
            break
        end
        task.wait(0.1)
    end
end

local function getTowerByID(id)
    local towerList = towers:GetChildren()
    return towerList[id]
end

local TDS = {}

function TDS.WaitWave(wave, min, sec)
    print(string.format("Waiting for wave %d at %02d:%02d...", wave, min, sec))
    waitForWave(wave, min, sec)
end

function TDS.VoteSkip(min, sec)
    print("Voting to skip wave")
    rF:InvokeServer("Voting", "Skip")
end

function TDS.Place(name, x, y, z, wave, min, sec, bool, rx, ry, rz, strBool)
    print(string.format("Placing tower %s at (%.2f, %.2f, %.2f)", name, x, y, z))
    local args = {
        "Troops",
        "Place",
        {
            Position = Vector3.new(x, y, z),
            Rotation = Vector3.new(rx or 0, ry or 0, rz or 0),
        },
        name
    }
    rF:InvokeServer(unpack(args))
end

function TDS.Upgrade(towerID, wave, min, sec, strBool)
    print("Upgrading tower ID", towerID)
    local tower = getTowerByID(towerID)
    if not tower then
        warn("Tower ID not found:", towerID)
        return
    end
    local args = {
        "Troops",
        "Upgrade",
        "Set",
        {
            Troop = tower,
            Path = 1,
        }
    }
    rF:InvokeServer(unpack(args))
end

function TDS.Target(towerID, mode, wave, min, sec)
    print(string.format("Setting target mode '%s' for tower %d", mode, towerID))
    local tower = getTowerByID(towerID)
    if not tower then
        warn("Tower ID not found:", towerID)
        return
    end
    local args = {
        "Troops",
        "Set",
        {
            Troop = tower,
            Target = mode
        }
    }
    rF:InvokeServer(unpack(args))
end

function TDS.Ability(towerID, wave, min, sec)
    print("Activating ability on tower ID", towerID)
    local tower = getTowerByID(towerID)
    if not tower then
        warn("Tower ID not found:", towerID)
        return
    end
    local args = {
        "Troops",
        "Activate",
        {
            Troop = tower
        }
    }
    rF:InvokeServer(unpack(args))
end

function TDS.Option(towerID, name, value, wave, min, sec)
    print(string.format("Setting option '%s'='%s' for tower %d", name, value, towerID))
    local tower = getTowerByID(towerID)
    if not tower then
        warn("Tower ID not found:", towerID)
        return
    end
    local args = {
        "Troops",
        "Option",
        "Set",
        {
            Troop = tower,
            Name = name,
            Value = value
        }
    }
    rF:InvokeServer(unpack(args))
end

function TDS.Sell(towerID, wave, min, sec)
    print("Selling tower ID", towerID)
    local tower = getTowerByID(towerID)
    if not tower then
        warn("Tower ID not found:", towerID)
        return
    end
    local args = {
        "Troops",
        "Sell",
        {
            Troop = tower
        }
    }
    rF:InvokeServer(unpack(args))
end

return TDS
