local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local state = ReplicatedStorage:WaitForChild("State")
local timer = state:WaitForChild("Timer")
local player = Players.LocalPlayer
local PGui = player:WaitForChild("PlayerGui")
local WaveL = PGui:WaitForChild("ReactGameTopGameDisplay"):WaitForChild("Frame").wave.container.value

local TDS = {}
local lastKey = ""

-- üïì WaitWave handler
function TDS:WaitWave(wave, min, sec)
	local function getWaveTime()
		local w = tonumber(WaveL.Text:match("%d+")) or 0
		local t = timer.Value
		return w, math.floor(t / 60), math.floor(t % 60)
	end

	while true do
		local w, m, s = getWaveTime()
		local currentKey = w .. ":" .. m .. ":" .. s
		if w > wave or (w == wave and (m > min or (m == min and s >= sec))) then
			break
		end
		if currentKey ~= lastKey then
			print(string.format("‚è≥ WaitWave(%d, %d, %d)", w, m, s))
			lastKey = currentKey
		end
		task.wait(0.1)
	end
end

-- üß± Place
function TDS:Place(towerName, x, y, z, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local pos = Vector3.new(x, y, z)
	rF:InvokeServer("Troops", "Place", {
		Position = pos,
		CFrame = CFrame.new(pos)
	}, towerName)
	print("‚úÖ Placed", towerName)
end

-- üîº Upgrade
function TDS:Upgrade(towerID, wave, min, sec, path, level)
	self:WaitWave(wave, min, sec)
	local tower = workspace.Towers:GetChildren()[towerID]
	if path then
		rF:InvokeServer("Troops", "Upgrade", "Set", {
			Troop = tower,
			Path = path
		})
		task.wait(0.2)
		for i = 1, level do
			rF:InvokeServer("Troops", "Upgrade", {
				Troop = tower
			})
			task.wait(0.1)
		end
	else
		rF:InvokeServer("Troops", "Upgrade", {
			Troop = tower
		})
	end
	print("‚¨ÜÔ∏è Upgraded Tower", towerID)
end

-- üéØ Target
function TDS:Target(towerID, mode, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = workspace.Towers:GetChildren()[towerID]
	rF:InvokeServer("Troops", "Set", {
		Troop = tower,
		Target = mode
	})
	print("üéØ Target Set", mode)
end

-- ‚ö° Ability
function TDS:Ability(towerID, abilityName, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = workspace.Towers:GetChildren()[towerID]
	rF:InvokeServer("Troops", "Activate", "Ability", {
		Troop = tower,
		Name = abilityName
	})
	print("‚ö° Ability", abilityName)
end

-- ‚öôÔ∏è Option
function TDS:Option(towerID, optionName, value, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = workspace.Towers:GetChildren()[towerID]
	rF:InvokeServer("Troops", "Option", "Set", {
		Troop = tower,
		Name = optionName,
		Value = value
	})
	print("‚öôÔ∏è Option", optionName, value)
end

-- ‚ùå Sell
function TDS:Sell(towerID, wave, min, sec)
	self:WaitWave(wave, min, sec)
	local tower = workspace.Towers:GetChildren()[towerID]
	rF:InvokeServer("Troops", "Sell", {
		Troop = tower
	})
	print("‚ùå Sold Tower", towerID)
end

-- ‚úÖ Skip Vote
function TDS:VoteSkip(wave, min, sec)
	self:WaitWave(wave, min, sec)
	rF:InvokeServer("Voting", "Skip")
	print("‚úÖ Voted Skip")
end

return TDS
