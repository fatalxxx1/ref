local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction") -- Replace with your actual RemoteFunction name

local TDS = {}

local function notify(text)
    print("[TDS Playback] "..text)
end

function TDS:Place(towerName, x, y, z, rotation)
    local pos = Vector3.new(x, y, z)
    local rot = rotation or CFrame.new()
    notify("Placing tower: "..towerName)
    rF:InvokeServer("Place", towerName, pos, rot)
end

function TDS:Upgrade(towerIndex, path)
    notify("Upgrading tower index: "..tostring(towerIndex).." path: "..tostring(path or 1))
    rF:InvokeServer("Upgrade", towerIndex, path or 1)
end

function TDS:Sell(towerIndex)
    notify("Selling tower index: "..tostring(towerIndex))
    rF:InvokeServer("Sell", towerIndex)
end

function TDS:Ability(towerIndex, abilityName)
    notify("Activating ability: "..abilityName.." on tower index: "..tostring(towerIndex))
    rF:InvokeServer("Ability", towerIndex, abilityName)
end

function TDS:WaitWave(wave, min, sec)
    notify("Waiting for Wave "..wave.." Time: "..min..":"..string.format("%02d", sec))
    wait(1) -- Just wait 1 sec as placeholder, replace with your own timing logic if needed
end

function TDS:Skip()
    notify("Skipping wave")
    rF:InvokeServer("Skip")
end

-- Usage example:
--[[
TDS:WaitWave(1, 0, 10)
TDS:Place("Cowboy", 11.5, 1, 7.7)
TDS:Upgrade(1, 2)
TDS:Ability(3, "Call Of Arms")
TDS:Sell(4)
TDS:Skip()
]]

return TDS
