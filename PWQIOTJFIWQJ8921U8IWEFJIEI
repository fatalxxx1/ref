repeat task.wait() until game:IsLoaded()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rF = ReplicatedStorage:WaitForChild("RemoteFunction")
local State = ReplicatedStorage:WaitForChild("State")
local Timer = State:WaitForChild("Timer")
local Player = game.Players.LocalPlayer
local Gui = Player:WaitForChild("PlayerGui")
local WaveText = Gui:WaitForChild("ReactGameTopGameDisplay").Frame.wave.container:WaitForChild("value")

local function getWaveTime()
    local wave = tonumber(WaveText.Text:match("%d+")) or 0
    local time = Timer.Time.Value
    return wave, math.floor(time / 60), time % 60
end

local function waitForWaveTime(targetWave, targetMin, targetSec)
    repeat
        task.wait(0.05)
        local w, m, s = getWaveTime()
        if w > targetWave or (w == targetWave and (m > targetMin or (m == targetMin and s >= targetSec))) then
            break
        end
    until false
end

_G.TDS = {
    WaitWave = function(wave, min, sec)
        waitForWaveTime(wave, min, sec)
    end,

    Place = function(tower, x, y, z, wave, min, sec)
        waitForWaveTime(wave, min, sec)
        rF:InvokeServer("Troops", "Place", {
            CFrame.new(tonumber(x), tonumber(y), tonumber(z)),
            CFrame.Angles(0, 0, 0)
        }, tower)
    end,

    Upgrade = function(id, wave, min, sec)
        waitForWaveTime(wave, min, sec)
        local tower = workspace.Towers:GetChildren()[tonumber(id)]
        if tower then
            rF:InvokeServer("Troops", "Upgrade", { Troop = tower })
        end
    end,

    Sell = function(id, wave, min, sec)
        waitForWaveTime(wave, min, sec)
        local tower = workspace.Towers:GetChildren()[tonumber(id)]
        if tower then
            rF:InvokeServer("Troops", "Sell", { Troop = tower })
        end
    end,

    Skip = function(wave, min, sec)
        waitForWaveTime(wave, min, sec)
        rF:InvokeServer("Waves", "Skip")
    end,

    Target = function(id, wave, min, sec)
        waitForWaveTime(wave, min, sec)
        local tower = workspace.Towers:GetChildren()[tonumber(id)]
        if tower then
            rF:InvokeServer("Troops", "Target", { Troop = tower })
        end
    end,

    Ability = function(id, ability, wave, min, sec)
        waitForWaveTime(wave, min, sec)
        local tower = workspace.Towers:GetChildren()[tonumber(id)]
        if tower then
            rF:InvokeServer("Troops", "Abilities", { Troop = tower, Name = ability })
        end
    end
}
